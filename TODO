# Ecosystem

 [ ] add Language Server Protocol implementation (https://microsoft.github.io/language-server-protocol/)

# Features

 [x] where syntax
 [x] composable serialization/deserialization functions
 [x] composable default types
 [ ] auto-casting
 [ ] side-effect handling
 [x] higher-order functions
 [ ] constraint system
 [ ] sum types

 * manifold hooks
   [ ] function docstrings
   [ ] caching
   [ ] effect handling hooks
   [ ] attach effects to labeled nodes in a composition 
   [x] set function parameters in external config (currying)

 * add support for more languages
   [+] R
   [+] Python3
   [+] C++
   [.] Rust
   [.] C
   [.] Ruse
   [ ] bash
   [ ] Haskell
   [ ] Perl
   [ ] Julia

# Refactoring

 [ ] Reimplement data types with recursion schemes. This should be able to
 eliminate much of the boilerplat that makes refactoring so time consuming and
 the code so ugly. We should be able to tease out the deeper structure of the
 program, such as the relationship between parsing and printing (algebras and
 coalgrebras?) and the alternating structures of SAnno and ExprS.

# Usability

 [ ] Make a Docker image

# Error reporting

 * In the compiler ...

   [x] Add meaningful error messages to parser
   [.] Replace the naked `error` calls everywhere

 * In the generated code ...

   [ ] On exceptions in generated code, return Morloc file and line number
   [x] Raise errors in pools when no manifold is found

# Testing

 [x] unit tests covering the typechecker
 [x] golden tests over generated output
 [ ] performance profiling
 [ ] code linting
 [ ] test coverage reports
 [ ] property testing

# Syntax

 [x] Remove semicolon requirement
 [ ] Allow semicolons

# UI and configuration 

 * in the top-level usage printout:
   [ ] print the short doc string

 * in the function-specific detailed printout:
   [x] print the type signature of each exported function
   [ ] print the long doc string

# typechecking

 [x] Add a full type inference system, this is just one layer of the type
     system, but is an essential one. Eventually this can be ported to the
     rule-engine.

# Documentation

 [ ] Write TensorFlow example
 [ ] Add haddock for every function
 [x] Write basic manual

 * Extend README with
   [ ] A discussion of the architecture (JSON, MorlocIO, etc)
   [x] A deeper discussion of the type system
   [x] More examples
   [ ] A contribution and future work section

 * github pages manual
   [.] A discussion of the architecture (JSON, MorlocIO, etc)
   [.] A deeper discussion of the type system
   [ ] More examples
   [.] A contribution and future work section

# Libraries

 * Extend the libraries
   [x] Add higher-order function libraries (map, foldl, foldr, reduce, filter).
       This will require handling for choosing a concrete function from among
       many language-specific alternatives. In C-morloc, the user specified the
       language of each function. I want to automate the choice.
   [ ] Add taxonomy library
   [.] Add `math` library
       [x] basic functions from `math.h`
       [ ] advanced functions from GNU Scientific Library
   [ ] Add `learning` library for machine learning
   [ ] Add `stat` library
   [ ] Add `physics` library

 * Determine library hierarchy
   [ ] Where do core files go? (e.g., `$MORLOC_HOME/lib/core/*`)
   [ ] Do we separate the *.loc files from the other language files?
