module foo
  ( pZeroBaseline
  , rZeroBaseline
  , cZeroBaseline
  , pTenBaseline
  , rTenBaseline
  , cTenBaseline
  , pZeroToForeign
  , pZeroFromForeign
  , rZeroToForeign
  , rZeroFromForeign
  , pTenToForeign
  , pTenFromForeign
  , rTenToForeign
  , rTenFromForeign
  , rMarginalCost1
  , rMarginalCost2
  , rMarginalCost3
  , rMarginalCost4
  , pMarginalCost1
  , pMarginalCost2
  , pMarginalCost3
  , pMarginalCost4
  )

source py from "foo.py" ("nmb" as pnmb, "pid", "len" as plen)
source R from "foo.R" ("nmb" as rnmb, "rid", "nchar" as rlen)
source Cpp from "foo.hpp" ("nmb" as cnmb, "cid", "strlen" as clen)

type R => Str = "character"
type R => Int = "integer"

type Py => Str = "str"
type Py => Int = "int"

type Cpp => Str = "std::string"
type Cpp => Int = "int"

-- Generate a test string with a length of n megabytes
pnmb :: Int -> Str
rnmb :: Int -> Str
cnmb :: Int -> Str

plen a :: Str -> Int
rlen a :: Str -> Int
clen a :: Str -> Int

pid a :: a -> a
rid a :: a -> a
cid a :: a -> a

-- C(L) : constant cost of calling language L
-- R(x) : cost of generating x megabyte string
-- F(x,L,M) : cost of sending x MB from L to M

-- 0MB test for baseline - t = C(L) + R(0)
pZeroBaseline = (plen . pnmb) 0
rZeroBaseline = (rlen . rnmb) 0
cZeroBaseline = (clen . cnmb) 0

-- 10MB test for baseline - t = C(L) + R(10MB)
pTenBaseline = (plen . pnmb) 100 -- 
rTenBaseline = (rlen . rnmb) 100
cTenBaseline = (clen . cnmb) 100

-- 0MB test for foreign interop
pZeroToForeign   = (clen . pnmb) 0 -- C(c) + C(p) + F(0,p,c) + R(0)
pZeroFromForeign = (plen . cnmb) 0 -- C(c) + C(p) + F(0,c,p) + R(0)

rZeroToForeign   = (clen . rnmb) 0 -- C(c) + C(r) + F(0,r,c) + R(0)
rZeroFromForeign = (rlen . cnmb) 0 -- C(c) + C(r) + F(0,c,r) + R(0)

-- 10MB test for foreign interop
pTenToForeign   = (clen . pnmb) 100 -- C(c) + C(p) + F(10,p,c) + R(10)
pTenFromForeign = (plen . cnmb) 100 -- C(c) + C(p) + F(10,c,p) + R(10)
                                                                    
rTenToForeign   = (clen . rnmb) 100 -- C(c) + C(r) + F(10,r,c) + R(10)
rTenFromForeign = (rlen . cnmb) 100 -- C(c) + C(r) + F(10,c,r) + R(10)

-- Test the marginal cost of foreign calls
-- This will be high if, for example, we have to fire up the interpreter for every call to Python
rMarginalCost1 = rnmb 0 
rMarginalCost2 = (rid . cid . rnmb) 0 
rMarginalCost3 = (rid . cid . rid . cid . rnmb) 0 
rMarginalCost4 = (rid . cid . rid . cid . rid . cid . rnmb) 0 

pMarginalCost1 = pnmb 0 
pMarginalCost2 = (pid . cid . pnmb) 0 
pMarginalCost3 = (pid . cid . pid . cid . pnmb) 0 
pMarginalCost4 = (pid . cid . pid . cid . pid . cid . pnmb) 0 
