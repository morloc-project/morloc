-- Tests passing records of primitives across languages and accessing fields

module m (foo, bar)

import root-py  (Str, Int, Tuple3, List)
import root-cpp (Str, Int, Tuple3, List)
import root-r   (Str, Int, Tuple3, List)

record Foo = Foo
  { flooz :: [Int]
  , things :: [Str]
  , size :: Int
  }
record Cpp => Foo = "foo_t"
record Py  => Foo = "dict"
record R   => Foo = "list"

source Py from "foo.py" ("addFlooz" as addFloozPy)
source Cpp from "foo.hpp" ("addFlooz" as addFloozCpp)
source R from "foo.R" ("addFlooz" as addFloozR)
addFloozCpp :: Int -> Foo -> Foo
addFloozPy  :: Int -> Foo -> Foo
addFloozR   :: Int -> Foo -> Foo

-- test interop
foo size =
  ( addFloozPy  3
  . addFloozCpp 2
  . addFloozR   1
  . addFloozPy  0
  ) { flooz = []
    , things = ["spiders"]
    , size = size
    }

-- test access
bar size = (fpy@flooz, fcpp@things, fr@size) where
    fpy = addFloozPy 42
      { flooz = []
      , things = ["a"]
      , size = size
      }

    fcpp = addFloozPy 42
      { flooz = []
      , things = ["b"]
      , size = size
      }

    fr = addFloozR 42
      { flooz = []
      , things = ["c"]
      , size = size
      }
