source py from "xxx.py" ("mlc_add" as pyadd, "mlc_mul" as pymul, "mlc_neg" as pyneg, "mlc_rec" as pyrec)

-- for typeclasses, I also need to add operators and operator initializers

class (Enum a) where
    succ a -> a

class (Eq a) => (Ord a)
    gt :: a -> a -> Bool


class Semigroup a where
    (+) :: a -> a -> a

class (Semigroup a) => Monoid a where
    zero :: a

class (Semigroup a) => Semiring a where
    one :: a
    (*) :: a -> a -> a

class (Semiring a) => Nat a where
    -- how should subtraction work for naturals?
    -- 1) x - y could equal 0 for all y > x
    -- 2) x - y could raise an error for all y > x
    (-) :: x:a -> y:a -> a where
        y <= x
    (^) :: a -> a -> a
    (%) :: a -> a -> a

class (Semiring a) => Ring a where
    neg :: a -> a
    (-) :: a -> a -> a

    -- default implementations
    x - y = add x (neg y)

-- When extending a class, must check that no names are shadowed
class (Ring a) => Num a where
    abs :: a -> a
    signum :: a -> a -- | converts to -1, 0 or 1, depending on sign
    fromInt :: Int -> a
    (^) :: a -> a -> a

class (Ring a) => Field a where
    inv :: a -> a
    (/) :: a -> a -> a -- with an exception

    -- default implementations
    x / y = mul x (inv y) -- where y is not 0
                          -- where div commutes

class (Num a, Field a) => Real a where
    exp :: a -> a -> a
    ln :: a -> a -> a
    log :: a -> a -- with an exception

class (Num a) => Integral a where
    (/) :: a -> a -> a
    rem :: a -> a -> a
    (%) :: a -> a -> a
    


class Functor f a where
    fmap :: (a -> b) -> f a -> f b

class Foldable f a where
    foldr :: (a -> b -> b) -> b -> f a -> b
    foldl :: (b -> a -> b) -> b -> f a -> b
    foldMap :: Monoid m => (a -> m) -> f a -> m
    mfold :: Monoid m => f m -> m
    foldr1 :: (a -> a -> a) -> f a -> a
    foldl1 :: (a -> a -> a) -> f a -> a
    toList :: t a -> [a]
    null :: t a -> Bool
    length :: t a -> Int
    elem :: Eq a => a -> f a -> Bool
    maximum :: Ord a => f a -> a
    minimum :: Ord a => f a -> a
    sum :: Num a => f a -> a
    product :: Num a => f a -> a

class Functor f => Applicative f where
    pure :: a -> f a
    liftA2 :: (a -> b -> c) -> f a -> f b -> f c

class (Functor f, Foldable f) => Traversable f a where
    traverse :: Applicative f => (a -> f b) -> f a -> f b
    mapM :: Monad m => (a -> m b) -> t a -> m (t b)
    sequence :: Monad m => t (m a) -> m (t a)
    sequenceA :: Applicative f => t (f a) -> f (t a)


-- general types do not require
instance Integral Int
instance Numeric Real

instance py Numeric "int" where
    add = mlc_add
    mul = mlc_mul
    neg = mlc_neg
    rec = mlc_rec

instance py Numeric "float" where
    add = mlc_add
    mul = mlc_mul
    neg = mlc_neg
    rec = mlc_rec
