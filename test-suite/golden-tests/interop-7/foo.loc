module m (foo)

type R Str = "character"
type R Real = "numeric"
type R Int = "integer"
type R (Tuple3 a b c) = "list" a b c

type Cpp Str = "std::string"
type Cpp Int = "int"
type Cpp Real = "double"
type Cpp Bool = "bool"
type Cpp (Tuple3 a b c) = "std::tuple<$1,$2,$3>" a b c

source R from "foo.R" ("f")
source Cpp from "foo.hpp" ("g")

f :: Int -> (Str, Real, Int)

g :: (l -> a -> a)
  -> (n -> e -> a -> a)
  -> a
  -> (n, e, l)
  -> a

foo = g (\l a -> a) (\n e a -> a) True . f
