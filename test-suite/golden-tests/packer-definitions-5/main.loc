module m (foo)

type Cpp => Map a b = "std::map<$1,$2>" a b
type Cpp => List a = "std::vector<$1>" a
type Cpp => Tuple2 a b = "std::tuple<$1,$2>" a b
type Cpp => Str = "std::string"
type Cpp => Int = "int"

type Py => Map a b = "dict" a b
type Py => List a = "list" a
type Py => Tuple2 a b = "tuple" a b
type Py => Str = "str"
type Py => Int = "int"

class Packable a b where
  pack :: a -> b
  unpack :: b -> a

instance Packable ([key],[val]) (Map key val) where
  source Py from "map.py"
    ( "packMap" as pack
    , "unpackMap" as unpack
    )

  source Cpp from "map.hpp"
    ( "morloc_packMap" as pack
    , "morloc_unpackMap" as unpack
    )

source Cpp from "map.hpp" ("insert")
insert :: Map Str b -> Str -> b -> Map Str b

source Py from "map.py" ("singleton")
singleton :: Str -> a -> Map Str a

foo :: Int -> Int -> Map Str Int
foo x y = insert (singleton "x" x) "y" y
