module m (foo)

type Py => Int = "int" 
type Py => Tuple2 a b = "tuple" a b
type Py => List a = "list" a

source Py from "foo.py" ("mlc_map" as map) 
map a b :: (a -> b) -> [a] -> [b]

foo :: [Int] -> [Int]
foo = map (\x -> x)

weird a :: a -> a -> a
weird x y = y

int :: Int -> Int
int x = x

foo = map (int . weird 1)
