module flucase (analysis, search)

import conventions (Str, Int, Filename, Real, Unit, Map, Tuple2)
import json (JsonObj)

type Accession = Str
type Clade = Str 
type StrainName = Str
type Sequence = Str
type EntrezQuery = Str
type Label = Str
type Date = Str
type Query = Str

type Py Accession = "str"
type Py Clade = "str"
type Py StrainName = "str"
type Py Sequence = "str"
type Py EntrezQuery = "str"
type Py Label = "str"
type Py Date = "str"
type Py Query = "str"

type Cpp Accession = "std::string"
type Cpp Clade = "std::string" 
type Cpp StrainName = "std::string"
type Cpp Sequence = "std::string"
type Cpp EntrezQuery = "std::string"
type Cpp Label = "std::string"
type Cpp Date = "std::string"
type Cpp Query = "std::string"

type R Accession = "character"
type R Clade = "character" 
type R StrainName = "character"
type R Sequence = "character"
type R EntrezQuery = "character"
type R Label = "character"
type R Date = "character"
type R Query = "character"

record Meta = Meta
  { accession :: Accession
  , clade :: Clade
  }

record Py Meta = "dict"
  { accession :: "str"
  , clade :: "str"
  }

record Cpp Meta = "struct"
  { accession :: "std::string"
  , clade :: "std::string"
  }

import bio.algo (upgma)

import bio.tree
  ( RootedTree
  , treeBy             -- treeBy :: ([b] -> Tree n e Int) -> [(l, b)] -> Tree n e l
  , pullNode           -- pull :: (l -> n') -> ([n'] -> n') -> Tree n e l -> Tree n' e l
  , mapChildWithParent -- mapChildWithParent :: (n -> n') -> (n' -> n -> n') -> Tree n e l -> Tree n' e l
  , mapLeaf
  )

import bio.db
  ( searchEntrez as fetchIds                    -- fetchIds :: EntrezSearchConfig -> Query -> [Str]
  , nucleotideAccessionToJson as fetchRecords  -- fetchIdRecords :: [Str] -> [Str]
  , EntrezSearchConfig
  , EntrezFetchConfig
  )

import base
  ( id
  , at        -- at :: [a] -> Int -> a
  , map
  , ne
  , concat
  , filter
  , shard     -- shard :: Int -> [a] -> [[a]]
  , gt        -- gt :: Int -> Int -> Bool
  , eq        -- eq :: Int -> Int -> Bool
  , head      -- head :: [a] -> a
  , take
  , ifelse    -- ifelse :: Bool -> a -> a -> a
  , join      -- join :: [a] -> [a] -> [a]
  , keys      -- keys :: Map a b -> [a]
  , length    -- length :: [a] -> Int
  , lengthS   -- lengthS :: Str -> Int
  , onFst     -- onFst :: (a -> a') -> (a, b) -> (a', b)
  , sleep     -- sleep :: Real -> a -> a
  , unique    -- unique :: [a] -> [a]
  , withSnds  -- withVals :: ([a] -> [b]) -> [(c, a)] -> [(c, b)]
  , readMap   -- readMap :: Filename -> Map key val
  )


source Py from "utilities.py"
  ( "parseRecord"
  , "labelRef"
  )

parseRecord :: JsonObj -> (Meta, Sequence)

labelRef :: Map Accession Clade -> Meta -> Meta


source R from "plot-tree.R" ("plotTree")

plotTree :: Filename -> RootedTree n Real Str -> ()


-- analysis :: Date -> Date -> Filename -> Filename -> ()
analysis mindate maxdate reffile treefile
  = ( plotTree treefile
    . mapLeaf (\x -> x@accession)
    . classify -- Tree string double meta
    . treeBy upgma
    . search fetchConfig searchConfig refmap
    ) query
  where
    query = "Influenza+A+Virus[Organism]+H3N2[ALL]+HA[ALL]"
    email = "zbwrnz@gmail.com"
    searchConfig =
      { email = email
      , db = "nuccore"
      , mindate = mindate
      , maxdate = maxdate
      , retmax = 1000
      }
    fetchConfig = { email = email }
    refmap = readMap reffile


search :: EntrezFetchConfig -> EntrezSearchConfig -> Map Accession Clade -> Query -> [(Meta, Sequence)]
search fetchConfig searchConfig refs query =
  ( map (onFst (labelRef refs))
  . concat
  . map ( map parseRecord
        . sleep 1.0
        . fetchRecords fetchConfig
        )
  . shard 30
  . join (keys refs)
  . take 50 -- putting this head hear causes an infinite loop in the typechecker
  . fetchIds searchConfig
  ) query


classify :: RootedTree n e Meta -> RootedTree Str e Meta
classify = push . pullNode pullLeaf pullClade where
  pullLeaf leaf = "leaf"
  pullClade xs = ifelse (True) "alice" "never"
  push = mapChildWithParent id (\ parent child -> "bob")

-- classify :: RootedTree n e Meta -> RootedTree Str e Meta
-- classify = push . pullNode pullLeaf pullClade where
--
--   pullLeaf leaf = leaf@clade
--
--   pullClade xs
--     = ifelse (eq (length seenClades) 1)
--              (head seenClades) ""
--     where
--       seenClades = ( unique
--                    . filter (ne 0 . lengthS)
--                    ) xs
--   push = mapChildWithParent id (\ parent child -> ifelse (eq 0 (lengthS child)) parent child)
