export align
export analysis
export at
export childrenOf
export chunks
export elem
export fetchIdRecords
export fst
export gt
export head
export ifelse
export join
export length
export longestORF
export lookup
export makeRefHeader
export mapLeafs
export nodes
export parseRecord
export pull
export readFasta
export retrieve
export fetchIds
export sleep
export snd
export strLength
export translate
export treeify
export unique
export annTree


type Filename = Str 
type Clade = Str 
type StrainName = Str
type Sequence = Str
type EntrezQuery = Str
type Label = Str
type Date = Str
type Query = Str

record Meta = Meta
  { accession :: Str
  , clade :: Str
  }

record EntrezSearchConfig = EntrezSearchConfig
  { email :: Str
  , db :: Str  
  , mindate :: Str
  , maxdate :: Str
  , retmax :: Int 
  }

-- import bio.io (readFasta, writeFasta)
-- import bio.tree (Tree, treeOf, viewTree)
-- import bio.algo (njTree as treeify, fooMsa as align)
-- import bio.db (searchEntrez as fetchIds, nucleotideAccessionToXml)
-- import bio.util (chunks, sleep)

align :: [Sequence] -> [Sequence]
annTree :: ([b] -> Tree n e Int) -> [(l, b)] -> Tree n e l
at :: [a] -> Int -> a
childrenOf :: Tree n e l -> n -> [l]
chunks :: Int -> [a] -> [[a]]
elem :: a -> [a] -> Bool
fetchIdRecords :: [Str] -> [Str]
fst :: (a, b) -> a
gt :: Int -> Int -> Bool
head :: [a] -> a
ifelse :: Bool -> a -> a -> a
join :: [a] -> [a] -> [a]
length :: [a] -> Int
longestORF :: Sequence -> Sequence
lookup :: k -> [(k, v)] -> v
makeRefHeader :: Str -> Meta
mapLeafs :: (l -> l') -> Tree n e l -> Tree n e l'
nodes :: Tree n e l -> [n]
parseRecord :: Str -> (Meta, Sequence)
readFasta :: Filename -> [(Str, Sequence)]
fetchIds :: EntrezSearchConfig -> Query -> [Str]
sleep :: Real -> a -> a
snd :: (a, b) -> b
strLength :: Str -> Int
translate :: Sequence -> Sequence
treeify :: [Sequence] -> Tree Int Real Int
unique :: [a] -> [a]
withVals :: ([a] -> [b]) -> [(c, a)] -> [(c, b)]

pull :: (l -> n') -> ([n'] -> n') -> Tree n e l -> Tree n' e l

classify = pull pullLeaf pullClade where
  pullLeaf :: Meta -> Str
  pullLeaf leaf = "asdf" -- leaf@clade

  pullClade :: [Str] -> Str
  pullClade xs = ifelse (eq (length observedClades) 1) (head observedClades) ""
    where
      observedClades = unique (filter (\x -> gt (strLength x) 0) xs)

analysis :: Str -> Str -> Filename -> Filename -> ()
analysis mindate maxdate reffile treeFile
  = plotTree treeFile mindate maxdate tree
  where
    query = "Influenza+A+Virus[Organism]+H3N2[ALL]+swine[ALL]"
    config = { email = "weena@mlc.com"
             , db = "nuccore"
             , mindate = mindate
             , maxdate = maxdate
             , retmax = 1000
             }
    refStrains = mapKeys makeRefHeader (readFasta reffile)
    newStrains = retrieve config query
    tree = ( classify
           . annTree treeify
           . withVals align
           ) (join refStrains newStrains)


retrieve :: EntrezSearchConfig -> Query -> [(Meta, Str)]
retrieve config
  = mapVal (translate . longestORF)
  . concat
  . map ( map parseRecord
        . fetchIdRecords
        )
  . chunks 100
  . fetchIds config
