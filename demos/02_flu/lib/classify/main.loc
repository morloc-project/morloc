module lib.classify (classify)

import lib.flutypes (Clade)

-- Import generic functions
import base
  ( id
  , snd
  , ifelse
  , eq
  , size
  , fst
  , branch
  , head
  , const
  , unique
  , ne
  , filter
  )

-- Import the tree type and generic functions for operating on it
import bio.tree
  ( RootedTree
  , pullNode
  , push
  )

-- Traverse the phylogenetic tree setting clade labels
classify n e a :: RootedTree n e (a, Clade) -> RootedTree Str e (a, Clade)
classify
  = push id passClade setLeaf
  . pullNode snd pullClade
  where
    passClade parent edge child = (edge, ifelse (eq 0 (size child)) parent child)
    setLeaf parent edge leaf = (edge, (fst leaf, parent))
    pullClade xs
      = branch (eq 1 . size) head (const "") seenClades
      where
        seenClades = ( unique
                     . filter (ne 0 . size)
                     ) xs
